name: SafeLink CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: safelink_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
    
    - name: Install Python dependencies
      working-directory: ./Backend/SafeLink_Backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: ./Backend/SafeLink_Backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: safelink_test
        DB_USER: postgres
        DB_PASSWORD: test_password
        CELERY_BROKER_URL: redis://localhost:6379/0
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./Backend/SafeLink_Backend/coverage.xml
        flags: backend

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./Frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./Frontend
      run: npm run lint || true
    
    - name: Run tests
      working-directory: ./Frontend
      run: npm test || true
    
    - name: Build
      working-directory: ./Frontend
      run: npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./Backend/SafeLink_Backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/safelink-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/safelink-backend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/safelink-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/safelink-backend:buildcache,mode=max
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/safelink-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/safelink-frontend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/safelink-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/safelink-frontend:buildcache,mode=max

  # Deploy (example for production)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your infrastructure"
        # Example: SSH to server and pull latest images
        # ssh user@server 'cd /opt/safelink && docker-compose pull && docker-compose up -d'
